// Generated using `moon info`, DON'T EDIT IT
package "hustcer/nanoid/lib"

// Values
let alphanumeric : String

let base58 : String

let base62 : String

fn custom_alphabet(String, size? : Int) -> Result[() -> Result[String, NanoidError], NanoidError]

fn custom_alphabet_or_empty(String, size? : Int) -> () -> String

fn custom_random(String, Int, (Int) -> Result[Array[Int], NanoidError]) -> Result[() -> Result[String, NanoidError], NanoidError]

fn custom_random_or_empty(String, Int, (Int) -> Array[Int]) -> () -> String

let filename_safe : String

let hex : String

let hex_upper : String

let lowercase : String

fn nanoid(size? : Int) -> Result[String, NanoidError]

fn nanoid_or_empty(size? : Int) -> String

let nolookalikes : String

let nolookalikes_safe : String

let numbers : String

let uppercase : String

let url_alphabet : String

let url_safe : String

// Errors

// Types and methods
pub enum NanoidError {
  EmptyAlphabet
  OversizedAlphabet(Int)
  InvalidSize(Int)
  RandomGenerationError(String)
}
fn NanoidError::to_string(Self) -> String
impl Eq for NanoidError

// Type aliases

// Traits

